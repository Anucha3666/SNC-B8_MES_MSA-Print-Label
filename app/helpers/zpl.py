import difflib
import os
import re
import shutil
import uuid
from datetime import datetime

import requests

from app.types import TREQ_PostPrintLabel
from app.utils import (convert_zpl_to_image, extract_number, find_part_code,
                       modify_zpl_coordinates, part)


def _increment_last_number(code: str) -> str:
    match = re.search(r'(\d+)(?!.*\d)', code)
    if not match:
        raise ValueError(f"ไม่พบตัวเลขในรหัส: {code}")

    number_str = match.group(1)
    number = int(number_str) - 1
    
    new_number = str(number).zfill(len(number_str))

    new_code = code[:match.start()] + new_number + code[match.end():]
    return new_code

def remove_last_digit(code: str) -> str:
    return re.sub(r'\d(?=\D*$)', '', code)

def increment_last_number(code: str) -> str:
    match = re.search(r'(\d+)(?!.*\d)', code)
    if not match:
        raise ValueError(f"ไม่พบตัวเลขในรหัส: {code}")

    number_str = match.group(1)
    number = int(number_str) + 1
    
    new_number = str(number).zfill(len(number_str))

    new_code = code[:match.start()] + new_number + code[match.end():]
    return new_code


def move_along_lenh(content, default, multiplier):
    move = default - (len(str(content)) * multiplier)
    return move

def move_according_to_conditions(content, conditions, default=0):
    move = next((size for length, size in sorted(conditions.items()) if (len(str(content))) < length), default)
    return move

def font_size(text, conditions, default="25,25"):
    font_size = next((size for length, size in sorted(conditions.items()) if len(text) < length), default)
    return font_size

def generate_zpl_labels(req: TREQ_PostPrintLabel):
    res = []
    zpl_part_image = ""
    zpl_content = ""
    folder_date = datetime.now().strftime("%Y-%m-%d")
    save_folder = os.path.join("temp", folder_date, "images", "labels")
        
    if (req['part_name'] == "Insulator A"):
        part_code = [
            {"a": "2PD06236/2-1D", "b": "2PD06237/2-1D", 'mat_no': '49001923, 49001922', 'order': f'{_increment_last_number(req['order_id'])}, {req['order_id']}' }, 
            {"a": "2PD06236/1-1D", "b": "2PD06237/1-1D", 'mat_no': '49001922, 49001923', 'order': f'{req['order_id']}, {increment_last_number(req['order_id'])}' },
            {"a": "2PD04461/1-1", "b": "2PD04462/1-1", 'mat_no': '49001928, 49001929', 'order': f'{req['order_id']}, {increment_last_number(req['order_id'])}' },
            {"a": "2P495491-1/1", "b": "2P495492-1/1", 'mat_no': '', 'order': f'{req['order_id']}, {increment_last_number(req['order_id'])}' },
            {"a": "2PD03599/1-1", "b": "2PD03599/1-1", 'mat_no': '49001930', 'order': f'{req['order_id']}, {increment_last_number(req['order_id'])}'}
        ]
        
        a_codes = [item["a"] for item in part_code]

        closest_match = difflib.get_close_matches(req['part_code'], a_codes, n=1, cutoff=0.5)

        dataPartAB = next((item for item in part_code if item['a'] == closest_match[0]), None) if closest_match else None

        zpl_content = f"""
    ^FO{move_along_lenh(req['tag_no'], 640, 30)},5^A0N,60,60^FD{req['tag_no']}^FS
    
    ^FO10,72^A0N,25,25^FDCustomer Name : {req['customer_name']}^FS
    ^FO480,72^A0N,25,25^FDModel {req['model']}^FS
    ^FO10,112^A0N,25,25^FDSupplier^FS
    ^FO110,112^A0N,25,25^FD{req['supplier']}^FS

    ^FO10,152^A0N,23,23^FDOrder ID^FS
    ^FO110,152^A0N,21,21^FD{dataPartAB['order']}^FS
    ^FO360,152^A0N,23,23^FDSAP No^FS
    ^FO460,152^A0N,21,21^FD{dataPartAB['mat_no']}^FS

    ^FO10,195^A0N,20,20^FDPart Code^FS
    ^FO200,195^A0N,20,20^FD{dataPartAB['a']}^FS
    ^FO10,245^A0N,20,20^FDPart Name^FS
    ^FO200,245^A0N,20,20^FDInsulator A^FS
    ^FO105,177^BQN,2,3,10^FDQA,{req['code']}^FS

    ^FO360,195^A0N,23,23^FDMat'l^FS
    ^FO460,195^A0N,25,25^FD{req['mat']}^FS
    ^FO360,245^A0N,23,23^FDColor^FS
    ^FO460,245^A0N,25,25^FD{req['color']}^FS

    ^FO10,295^A0N,20,20^FDPart Code^FS
    ^FO110,295^A0N,20,20^FD{dataPartAB['b']}^FS
    ^FO10,345^A0N,20,20^FDPart Name^FS
    ^FO110,345^A0N,20,20^FDInsulator B^FS
    ^FO260,277^BQN,2,3,10^FDQA,{increment_last_number(req['code'])}^FS
    
    ^FO360,295^A0N,23,23^FDProducer^FS
    ^FO460,295^A0N,25,25^FD{req['producer']}^FS
    ^FO360,345^A0N,23,23^FDDate^FS
    ^FO460,345^A0N,25,25^FD{req['date']}^FS

    ^FO10,390^A0N,23,23^FDPicture of Part^FS

    ^FO360,390^A0N,23,23^FDQuantity (Unit)^FS
    ^FO440,420^A0N,50,50^FDA: {req['quantity']}^FS
    ^FO440,460^A0N,50,50^FDB: {req['quantity']}^FS
    ^FO360,505^A0N,20,20^FDRoHS2^FS
    ^FO585,505^A0N,20,20^FDPCS.^FS
     """
     
        if (dataPartAB['a'] == '2PD04461/1-1' ):
            zpl_content += image_2PD0446AB_1_1
        elif (dataPartAB['a'] == '2PD06236/2-1D' ):
            zpl_content += image_2PD0623AB_2_1D
        
    else: 
         zpl_content = f"""
    ^FO{move_along_lenh(req['tag_no'], 640, 30)},5^A0N,60,60^FD{req['tag_no']}^FS
    
    ^FO10,72^A0N,25,25^FDCustomer Name : {req['customer_name']}^FS
    ^FO480,72^A0N,25,25^FDModel {req['model']}^FS
    ^FO10,112^A0N,25,25^FDSupplier^FS
    ^FO110,112^A0N,25,25^FD{req['supplier']}^FS

    ^FO10,152^A0N,25,25^FDOrder ID^FS
    ^FO110,152^A0N,25,25^FD{req['order_id']}^FS
    ^FO360,152^A0N,23,23^FDSAP No^FS
    ^FO460,152^A0N,25,25^FD{req['sap_no']}^FS

    ^FO10,205^A0N,30,30^FDPart^FS
    ^FO10,235^A0N,30,30^FDCode^FS
    ^FO110,{move_according_to_conditions(req['part_code'], {9: 210, 11: 213, 13: 215}, 210)}
    ^A0N,{font_size(req['part_code'], {9: "60,60", 11: "50,50", 13: "40,40"})}
    ^FD{req['part_code']}^FS

    ^FO360,195^A0N,23,23^FDMat'l^FS
    ^FO460,195^A0N,25,25^FD{req['mat']}^FS
    ^FO360,245^A0N,23,23^FDColor^FS
    ^FO460,245^A0N,25,25^FD{req['color']}^FS

    ^FO10,305^A0N,30,30^FDPart^FS
    ^FO10,335^A0N,30,30^FDName^FS
    ^FO110,{move_according_to_conditions(req['part_name'], {10: 310, 12: 313, 14: 315, 16: 317, 18: 319}, 321)}
    ^A0N,{font_size(req['part_name'], {9: "60,60", 11: "50,50", 13: "40,40", 15: "35,35", 17: "30,30"}, "25,25")}
    ^FD{req['part_name']}^FS


    ^FO360,295^A0N,23,23^FDProducer^FS
    ^FO460,295^A0N,25,25^FD{req['producer']}^FS
    ^FO360,345^A0N,23,23^FDDate^FS
    ^FO460,345^A0N,25,25^FD{req['date']}^FS

    ^FO10,390^A0N,23,23^FDPicture of Part^FS
    ^FO205,370^BQN,2,5,10^FDQA,{req['code']}^FS

    ^FO360,390^A0N,23,23^FDQuantity (Unit)^FS
    ^FO440,420^A0N,100,100^FD{req['quantity']}^FS
    ^FO360,505^A0N,20,20^FDRoHS2^FS
    ^FO585,505^A0N,20,20^FDPCS.^FS
     """
        
    zpl_part_image = modify_zpl_coordinates(req['zpl_part'], 10, 410)
     
    for i in range(req['number_of_tags']):
        number_of_tags = f"^FO2,532^A0N,15,15^FD{req['code']} ({i + 1}/{req['number_of_tags']})^FS"

        if (req['part_name'] == "Insulator A"):
            zpl_code = f"{head_zpl_640x550}{head_label_640x550}{tabel_zpl_2_part}{zpl_content}{zpl_part_image}{number_of_tags}{revision}{footer_zpl}"
            image_path = convert_zpl_to_image(zpl_code, 3.15, 2.7, 8, save_folder)
            res.append(image_path)
        else:
            zpl_code = f"{head_zpl_640x550}{head_label_640x550}{tabel_zpl}{zpl_content}{zpl_part_image}{number_of_tags}{revision}{footer_zpl}"
            image_path = convert_zpl_to_image(zpl_code, 3.15, 2.7, 8, save_folder)
            res.append(image_path)
        
    return res
 
head_zpl_640x550 = '^XA^PW640^LL550'
revision = '^FO250,532^A0N,15,15^FDF-PRO-001 LABEL MES | Effective Date 03-05-2568 Rev.0^FS'
footer_zpl = '^XZ'
logo_zpl_55x55 = '^FO5,0^GFA,385,385,7,,L06C,K01EF,K03EF8,K0FEFE,J01FEFF,J07FEFFC,J0FFEFFE,I03FFEIF8,I07FFEIFC,001IFEJF,003IFEJF8,00JFEJFE,01JFEKF,07JFEKFC,0KFEKFE,1KFELF,07JFEKFC,03JFEKF8,18JFEJFE3,1C7IFEJFCF,1F1IFEJF1F,1F8IFEIFE7F,1FE3FFEIF8FF,1FF1FFEIF3FF,1FFC7FEFFC7FF,1FFE3FEFF9IF,1IF8FEFE3IF,1IFC7EFCJF,0JF1EF1IFE,07IF8EE7IFC,11IFE00JF1,1CJF03IFE7,1E3IFC7IF8F,1F9IFEJF3F,1FC7FFEIFC7F,1FF3FFEIF9FF,1FF8FFEFFE3FF,1FFE7FEFFCIF,1IF1FEFF1IF,07FFCFEFE7FFC,03FFE3EF8IF8,00IF9EF3FFE,007FFC6C7FFC,001IF01IF,I0IF83FFE,I03FFC7FF8,I01FFEIF,J07FEFFC,J03FEFF8,K0FEFE,K07EFC,K01EF,L0EE,,^FS'
head_label_640x550 = f"{logo_zpl_55x55}^FO65,0^GB5,50,5^FS^FO80,0^A0N,40,40^FDMES B8^FS^FO80,35^A0N,20,20^FDManufacturing Execution System B8^FS"
tabel_zpl = '^FO0,60^GB638,2,2^FS^FO1,100^GB638,2,2^FS^FO1,140^GB638,2,2^FS^FO1,180^GB638,2,2^FS^FO350,229^GB288,2,2^FS^FO1,280^GB638,2,2^FS^FO350,329^GB288,2,2^FS^FO1,380^GB638,2,2^FS^FO1,525^GB638,2,2^FS^FO0,62^GB3,464,3^FS^FO100,100^GB3,280,3^FS^FO350,140^GB3,385,3^FS^FO450,140^GB3,240,3^FS^FO637,62^GB3,464,3^FS'
tabel_zpl_2_part = '^FO0,60^GB638,2,2^FS^FO1,100^GB638,2,2^FS^FO1,140^GB638,2,2^FS^FO1,180^GB638,2,2^FS^FO1,229^GB100,2,2^FS^FO195,229^GB155,2,2^FS^FO350,229^GB288,2,2^FS^FO1,280^GB638,2,2^FS^FO1,329^GB100,2,2^FS^FO100,329^GB155,2,2^FS^FO350,329^GB288,2,2^FS^FO1,380^GB638,2,2^FS^FO1,525^GB638,2,2^FS^FO0,62^GB3,464,3^FS^FO100,100^GB3,280,3^FS^FO350,140^GB3,385,3^FS^FO450,140^GB3,240,3^FS^FO637,62^GB3,464,3^FS'

image_2PD0623AB_2_1D = '^FO70,410^GFA,2970,2970,27,,:::gY0FFE,gY0IFE,gY0CE7FC,Q01FF8gI0FC079C,P03IFCgH0KF9E,P07IFCgG07KF9FC,P067E7F8Y03LF1FF,O01E7E77F8X0PFC,O0KF03FW03QF,N07E7E7F003CV0RFC,M01F03066I07U01JF8F1E0JF,M07C0FFE7FF01CT07IF80F1E01IFC,L01F07FFE7FFE07T0IFC00F1E003FFE,L03C3FC3FFC1F81CR01IFI0F1EI07FF,L0F0FE03FFC03E06R07BFCI0F1EI03FDC,K01E1F003FFC007838Q0F1FJ0FFEJ0F8E,K03C3C003FFC001C1CP01E1EJ0F1EJ0F07,K07E7I03FFCI067EP0381FJ0F1EI01F038,K0FFEI03FFCI07FFP07C0F8I0FFEI03F07C,J01FFEI03FFCI07FF8O0FE07CI0FFEI07E07E,J03IFI03FFCI0FFECN01FF03CI0FFEI07C1FF,J073FF8003FFC001FFC6N01FF83E007IFC00F83FF8,J0E1FFC003FFC003FFC3N03FFC3F00JFE01F87IF,I01C0FFE01F80F007FFC18M07FFE7F9CJFE63FCJF8,I0F8FF3F01JF80JF1CM0FF9FE7FE7C01EFFE7FBFF8,001F9FF1F39JF98JF8CM0FF0FCFFEK0FFE3F1F8C,0039B9F8FFCF003BJF9C6L01FF07DFFCK03FF7E0F1C,0033F8FCEFCJ01JF0E3L03FE03IF8L0IFC0F3C,0033F07CE78K0F7FF073L03FC03FFEM07FF807F8,001FE03FFEL03BFE0718K07FC01FF8M01FF003FC,003FC01FFCL01CFC039CK07F800FFO0FF003FC,0033C01D7N0678018CK0FFI07EO07E001FE,0073800EEN037001CEK0FFI07CO03E001FE,00638007CN01FI0C6J01FEI0F8O01FI0FF,0067I0F8O0FI0EFJ01FE001FQ0FI0FF,00E7001FP0F8007FJ019C001EQ0FI07F,00CE001EP078007FJ03BCI04Q02I07F8,01CEI0CP018007F8I03BCY03F8,018CX0378I03F800FR01E003F8,018C00ER0E00378I07FC00FR01E007FC,038C00FR0F0071CI07FFE0FR01E0IFC,0387F0FR0F0FF0CI067JFR01KFC,03FBIFR07JFCI061IFES0KFC,03JFER07JFCI0601FFES0IF9FE,03C7FEER067FE3CI0E00EFES0FFE1FE,07C71FER03FCE3EI0E00CFCS07E61FE,07C607CR03E067EI0E00CFCS07E61FE,07FF87CR03E1FFEI0IFDFCS07F7FFE,061IFCR03IFC6I0KFCS07JFE,063IFCR03IF8EI0KFCS07JFE,063FFDCR03BFFDEI0KFCS07JFE,0630FFCR03FFCFEI0CE07FCS07FE0FE,067007CR03F00FEI0CE007CS03C00FE,067003CR03C00FEI0CE003CS07C00FE,067003CR03C00FEI0FE007CS07C00FE,067003CR01C00EEI0FE003CS03C00FE,0670018S0C00E6I0FE0018T0800FE,067g0E6I0FEgG0FE,077I08R03I0EEI0FEI08S02I0FE,033003CR03C00CEI0FF003CS07800FE,033801ER07801CCI067003ES0F801CE,033801ER07801CCI07F001ES0F001FC,033801FR0F801CCI07F001FS0F001FC,039803FR0FC01DCI07F001FR01F001FC,019C0FBR0CE03B8I07F807FR01FC03FC,01FC1FD8P01F383F8I03F81FF8Q03FE03F8,07FC7FFCP03FCE3F8I03F83FF8Q03FF83FC,077IFECP03F737F8I03BCIFCQ07FFE78E,0337FE76P07E3DEFJ019FFDFEQ0FF7FF0E,03F3F877P0EE0E6FJ01IFCFEQ0FE7FF8C,01F3F1FFP0F38F8FJ01FFEE7FP01FEE3FFC,00IF7FF8N01F9CEE6K0FF86FF8O03FEC1FFC,01LFCN03EE7C7F8I01F807FFCO07FFC01F8,01JFE3CN01C39C7F8I03C007FBCO07CFC0038,01F7FF8098L01880EE6F8I03001FE1CO0387F0018,00F7FF003CL07C0033EF8I03807F8098M06101FC038,00FBFC003FK01FC001DDFJ0180FE003EM0F8007E038,007F38001FCJ07FCI0C7EJ01C0FC003F8K03F8001E07,003E18I067C003FFI01D3EK0C3FJ0FEK0FFI01F86,003F1CI0F1FC7FF7I03BFCK067F8I07FCI07FEI03F8E,001F8EI0FE3E7EFFI07FFCK07FF8I07FFE0IFCI03FEC,I09C7I0IFE7IFI0FF88K03F9CI07IFBIFCI07FFC,J0C3801F3E63FCF801FF8L01B9EI0JFBIFEI0FF98,J061C01F3E003CF803CFN01FFI0JF9IFE001FF,J030E03E7C003E7C078EO0FF800F3F001FDE003FF,J018703E7C003E7C1F1CO07FC01F1FI0F1F007FE,K0C3C3E7C001E7C3E38O03FF01FDEI0IF01FFC,K060E7EF8001F7EF8FP01FF81EFEI0IF83CF8,K0383IF8001JF1EQ0FFC3E3EI07C78F8F,K01F8F9FJ0FFBC38Q07FF3C3CI07879F9E,L07E39FJ0FF80FR03IFC7CI07C7IFC,L033B9FJ0FFC1ES0IF878I03C7IF,L073B1F8001FFC78S07FF878I03IF3E,L0339F9JFCFDET01FF0F8I03IF1C,L01FEF03IF0FFCU0FE0FCI07IF9C,M063F78J07FV03E07NFBC,O0IFI03F8W0E0PF8,O01FF00FFCX03CNFEE,P01JFEg0JFBJF,R01EgH01IFBIF8,gW03KFC,gX01IF8,,:::^FS'
image_2PD0446AB_1_1 = '^FO70,410^GFA,3300,3300,30,,:::S0JF,R07JFEgI03IFE,R0FC007EgH01KFC,Q01FC003FgG073F800FC,O010FFC007FFg0F7FI0FE78,O07BFFC003FFCX01IFI0IF8,N01JFC003IFX019FFI0FFD8,N07BIFC0077FFC0EU078FFI0FFBE,N0E3FE0C00607FF1F8S01IF3I0CIF8,M03C3F00C00701IFBCS03FF83I0C1FFC,M0707800C006007FF1CS0FFC03I0C03FF,L01E1EI0C006001FF1CQ013FF003I0C00FFC,L03F38I0C006I07C38Q03FFC003I0C003FE,L07FFJ0C006I01E3R07FFI03I0CI0FF,L07FEJ0C006J0F7R0FFCI03I0CI07F8,L07F8J0C006J03F8P03FF8I03I0CI01FE,K03FFK0C006J01FC8O07FEJ03I0CJ0FF,K07FEJ01C7C7K0FFCO07FCJ03I0CJ07FA,K0FF8J03JFCJ07FEO0FF8J031FCEJ03FF,J01FFJ03LFCI03FF18K071FFK0KFK0FF8,J01FEJ0MFEI01IFCK0IFEJ0MFJ07FC,J03FCJ0FFC003FEJ0IFEK0IFCI01MF8I03FE,J071EJ0FCJ07EJ079FEJ01FEF8I01FEI07F8I01FE,J060F801E7K01C7I0F1FFJ03FE3C0019FK0F88001FF,J0E03E03EN0F803C3DFJ03EE1F003C4K039E007FF8,I01C00F03EN0F80F038F8I07C607C07CM03E00F7F8,I018007CFEN0FE1E01CF8I07CE01F0FCM03F03C3FC,I038001FF8N07FF800C7CI0FCC007BF8M01F8F03FC,I03J07FO01FEI0FFCI0FFC003FEO0FFE01FE,I07J03EP0F8I07F8I07F8I0FCO07F800FE,I06J07CP07CI03FJ01D8I078O03EI0FF,I0EJ0F8P03CJ0EJ01CJ0FP01FI07F,I0F8I0FQ03EJ0EJ03EI01EQ0F8007F8,I0FC001EQ01FI03EJ01FI03CQ078003F8,001FF003ER0FI0FEJ03FC003CQ03C003F8,001FFC03CR07801FFJ03FF0078Q03E003FC,001FDF038R07807FFJ03FF80FR01E00FFC,003F87878R03C1E7FJ03F3E0FS0F01FFC,003F83E7S03C3C3EJ01F0F9ES0F078FC,003F80FFS01CF036J01F03DES071E0FE,001F003FS01FC03EJ01E01FCS07BC0FE,I0F001ES01F803EJ01E007CS07F00FE,001F001ET0F001EJ03E007CS03E0078,001F001ET0F001EJ03E0078S03C0078,001F001CT0F001BJ07E0078S03C007C,001E003CT0F801BCI0FC0078S01C006C,001E003CT07801FCI0FC00F8S01E007C,001E007CT07801FCI0FC00FT01E007C,001E007CT07801FCI0FC00FT01E003C,001E0038T07801CCI0FC00FT01E003C,003EgG01CC001FCX0E003C,007EgG01CC001FCgG03C,007E0038T038018C001FC007X03C,007E0078T07801CCI0FC00FU0E003C,0066007CT07801FCI03C00FT01E003C,:007E003CT07801FCI03C00FT01E007C,007E001CT0F001FCI07C0078S01E007C,007F001CT0F001FJ0FC0078S01C007C,001F001ET0F001EJ0FE0078S03C007C,001F003ET0F003EJ0FE0078S03C0078,I0F007ES01F803EJ0FE007CS03E0078,I0F80FFS01FE03EJ01E01FCS07F00FC,I0F83CFS01CF03EJ01F079ES07FC0FE,I0F8F878R03C7C3EJ01F0F1ES071F0FE,001FDE078R0381F7EJ03F3C0FS0F078FC,001FF803CR07807FFJ03FF00FR01E03FFC,001FE003ER0F001FFJ03FC0078Q01E00FFC,I0F8001ER0FI0FEJ03F8007CQ03C003FC,I0FJ0FQ01EI03EJ01EI03CQ03C003F8,I0EJ0F8P03EJ0EJ01CI03EQ078003F8,I0E8I07CP07CJ0CJ01CI01FQ0FI07F,003FCI03EP078I01CK0CJ0F8O01FI07F8,007FCI07FP0FCI018K0EJ0FCO03FI0FFE,007EE001FF8N03FFI038K06I03FEO07F801FFE,007C70078FCN07EF8003L07I0F3F8N0FFE01F3E,003E701F07EN0FC3E007L03003E1F8M01F8F83F1E,003E303C03EM01F80F806L0380780F8M03E03C7E3E,001FF0F001E7L0CF003C0EL01C1E0078CK013E01F7F7C,I0FF3CJ0FEJ07C6001F1CM0C78I09F8J079C007IFC,I0IFEJ0FFE007FCJ07F8M0FF8I03FFI07F8I01IF8,I07IFJ0MFEJ0FFN07FCI03MF8I03IF,I079FF8I07LFCI01FFN03FEJ0MF8I07IF,K0FF8J03JFCJ03FEN03FFK0KFK0FF8E,K07FEJ018007K07FCN01FF8J07001EJ01FF8,K03FFJ018006K0FF8O0FFCJ03I0CJ03FF,K03FF8I018006J01F8Q0FEJ030018J07FE,K01FFCI018006J07FR07F8I030018J0FFC,M0FFI018006J0FER03FCI030018I03FF8,M07FC0018006I03FCR01FFI030018I07FE,M03FE0018006I07F8S0FFC0030018001FFE,N0FF8018006001E78S03FF0030018007FC8,N07FF01800600F838S01FFC03001801FF,N01EFE1C00607F0FT01IF8300180FFE,N01CFFD80063FF1ET01KF0018IF8,N01JF8007JF8U0LF07IFE,O0JF8007IFEV01PF8,O03CFF8007FF38W0PF8,Q01F8007F8Y01F7MF8,Q01FC007EgH03LFE,Q01KFEgH03LF,R01JF8gI03IFE,,:::^FS'